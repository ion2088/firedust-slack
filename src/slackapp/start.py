import os
import logging
from firedust.assistant import Assistant

from slack_bolt import App

ASSISTANT: Assistant = Assistant.load(assistant_id=os.environ.get("ASSISTANT_ID"))
APP = App(
    token=ASSISTANT.config.interfaces.slack.tokens.bot_token,
    signing_secret=ASSISTANT.config.interfaces.slack.credentials.signing_secret,
)
BOT_INFO = APP.client.auth_test().data
LOG = logging.getLogger("slackapp")


# decorators kwarg docs: https://slack.dev/bolt-python/api-docs/slack_bolt/kwargs_injection/args.html
@APP.event("app_home_opened")
def update_home_tab(client, event):
    LOG.info("Updating home tab")
    try:
        # Call views.publish with the built-in client
        client.views_publish(
            # Use the user ID associated with the event
            user_id=event["user"],
            # Home tabs must be enabled in your app configuration
            view={
                "type": "home",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": ASSISTANT.config.interfaces.slack.description,
                        },
                    },
                ],
            },
        )
    except Exception as e:
        LOG.error(f"Error publishing home tab: {e}")


@APP.command("/test")
def hello_command(ack, say, command):
    LOG.info("Running /test command")
    ack()
    say(f"Hello, <@{command['user_id']}>!")


@APP.event("app_mention")
def mention_event(event, say, client, ack):

    ack()

    # Replace the bot ID with the assistant name
    bot_info = client.auth_test()
    bot_id = bot_info.data["user_id"]
    text = event["text"].replace(f"<@{bot_id}>", ASSISTANT.config.name).strip()

    # Get the name of the user that mentioned the bot
    user_info = client.users_info(user=event["user"])
    user_name = user_info.data["user"]["real_name"]

    # Retrieve the channel name
    channel_info = client.conversations_info(channel=event["channel"])
    channel_name = channel_info.data["channel"]["name"]

    # Generate assistant response
    message = f"""
    Slack channel: {channel_name}.
    
    Message from {user_name}:

    {text}
    """
    # TODO: Add the latest messages to the context
    response = ASSISTANT.chat.complete(message, user_id=event["user"])

    say(response)


# @APP.message(matchers=[ASSISTANT.config.name, ASSISTANT.config.name.lower()])
# def message_hello(message, say, event):
#     LOG.info(f"Message received: {message}")
#     LOG.info(f"Event: {event}")
#     say("Hello there!")


# Save and learn all the messages
@APP.event("message")
def message_test(event, message, payload, context, body):
    # TODO: Learn the messages that are sent in the channel, but are not generated by or mentioning the assistant
    # For this, we would need to add an endpoint that learns the messages
    pass
    # LOG.info(f"Event: {event}")
    # LOG.info(f"Message: {message}")
    # LOG.info(f"Payload: {payload}")
    # LOG.info(f"Context: {context}")
    # LOG.info(f"Body: {body}")


@APP.event("channel_joined")
def channel_join(event, say):
    # TODO: Learn the history of the channel
    pass
